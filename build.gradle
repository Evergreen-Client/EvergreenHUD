plugins {
    // Languages
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.5.21'

    // Build
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'org.ajoberstar.grgit' version '4.1.0'
    id 'com.github.gmazzo.buildconfig' version '3.0.1'
}

ext {
    gitHash = (grgit != null && grgit.head() != null ? grgit.head().abbreviatedId : null)
    versionStr = {
        def ver = core_version

        // CI Builds Only
        def run_num = System.getenv('GITHUB_RUN_NUMBER')
        if (run_num != null)
            ver += "-build.${run_num}"

        if (!core_prerelease.trim().isEmpty())
            ver += "-pre.${core_prerelease}"

        return ver
    }()
    versionWithRev = {
        def ver = versionStr

        if (ext.gitHash) {
            ver += "-rev.${ext.gitHash}"
        }

        return ver
    }()
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'org.ajoberstar.grgit'
    apply plugin: 'com.github.gmazzo.buildconfig'

    version = versionStr
    group = 'co.uk.isxander'

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    repositories {
        mavenCentral()
        maven {
            name = 'JitPack'
            url = 'https://jitpack.io/'
        }
        maven {
            name = 'Sk1er Public'
            url = 'https://repo.sk1er.club/repository/maven-public'
        }
    }

    configurations {
        include
        implementation.extendsFrom(include)
    }

    jar {
        archiveBaseName.set("EvergreenHUD (${project.name}-${project.versionWithRev})")
        archiveVersion.set("")
        enabled = false

        exclude 'META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'module-info.class'
    }

    shadowJar {
        archiveBaseName.set(jar.archiveBaseName.get())
        archiveClassifier.set('')
        archiveVersion.set('')

        configurations = [project.configurations.include]
        duplicatesStrategy DuplicatesStrategy.EXCLUDE
    }

    compileKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
            freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
            freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
        }
    }
}

